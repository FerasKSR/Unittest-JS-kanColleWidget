/**
 * npm run should-release
 * Ë∂Ö„Ç§„Ç±„Å¶„Çã„Å™„Çì„Åß„ÇÇ„ÇÑ„Çã„Çπ„ÇØ„É™„Éó„Éà.
 * @entypoint main()
 *
 * NODE_ENV=production„ÅÆ„Å®„Åç„ÅØ„ÄÅ
 *   "RELEASE PR" „Å´„Å§„ÅÑ„Å¶„Çã„Ç≥„É°„É≥„Éà„ÇíË¶ã„Å¶„ÄÅ
 *   „Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„É™„É™„Éº„Çπ„Åô„Åπ„Åç„ÅãÂà§Êñ≠„Åó„ÄÅ
 *   „ÉÑ„Ç§„Éº„Éà„Åô„Åπ„Åçannouncement.txt„Çí‰ΩúÊàê.
 *
 * NODE_ENV=staging„ÅÆ„Å®„Åç„ÅØ„ÄÅ
 *   Áõ¥Ëøë„ÅÆ„Çø„Ç∞„Åã„Çâ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÊõ¥Êñ∞„Åå„ÅÇ„Çã„ÅãË¶ã„Å¶„ÄÅ
 *   „ÉÜ„Çπ„Éà„É™„É™„Éº„Çπ„Åô„Åπ„Åç„ÅãÂà§Êñ≠„Åó„ÄÅ
 *   „Çø„Ç∞„Çí‰ªò„Åë„Å¶PUSH BACK„Åó„ÄÅ
 *   „ÉÑ„Ç§„Éº„Éà„Åô„Åπ„Åçannouncement.txt„Çí‰ΩúÊàê.
 */

const core = require("@actions/core");
const github = require("@actions/github");
const shell = require("child_process");
const fs = require("fs").promises;

async function getReleasePR(octokit, owner = "KanCraft", repo = "kanColleWidget", head = "develop", base = "main", state = "open") {
  const pulls = await octokit.pulls.list({ repo, owner, head, base, state });
  return pulls.data[0];
}

const REQUIRED_LGTM_FOR_PRODUCTION_RELEASE = 3;
function getReleasePRAnnounce(pr) {
  return (
    "Ëá™Âãï„É™„É™„Éº„Çπ„Éó„É≠„Çª„Çπ„ÅåOPEN„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n"
    + "„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂ÂêÑ‰Ωç„ÅØ„ÄÅ„ÉÜ„Çπ„Éà„É™„É™„Éº„Çπ„Å´ÂïèÈ°å„ÅåÁÑ°„Åë„Çå„Å∞„ÄÅ‰∏ãË®ò„É™„É≥„ÇØ„ÅÆ„Ç≥„É°„É≥„ÉàÊ¨Ñ„Å´„Äåüëç„Äç„Å®„Ç≥„É°„É≥„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n"
    + `${REQUIRED_LGTM_FOR_PRODUCTION_RELEASE}‰∫∫‰ª•‰∏ä„ÅÆ üëç „ÅåÈõÜ„Åæ„Çã„Å®Ëá™Âãï„ÅßÊú¨Áï™Áí∞Â¢É„Å∏„É™„É™„Éº„Çπ„Åï„Çå„Åæ„ÅôÔºÅ\n\n`
    + `> ${pr.title}\n#Ëâ¶„Åì„Çå„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà\n`
    + pr.html_url
  );
}

function formatTweetStatus(header, commits, hashtag, suffix = "") {
  const MAX_LENGTH = 140;
  const status = `${header}\n${commits.join("\n")}\n${suffix}\n${hashtag}`;
  if (status.length < MAX_LENGTH) return status;
  return formatTweetStatus(header, commits.slice(0, -1), hashtag, "„Å™„Å©");
}
function createStageReleaseAnnounce(LATEST_TAG, NEW_TAG) {
  const commits = shell.execSync(`git log --pretty="%s" --no-merges ${LATEST_TAG}..HEAD`).toString().trim().split("\n");
  return formatTweetStatus(`[„ÉÜ„Çπ„ÉàÁâà„É™„É™„Éº„Çπ] ${NEW_TAG}`, commits, "#Ëâ¶„Åì„Çå„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà");
}

async function writeAnnouncement(announce) {
  const fname = "./announcement.txt";
  await fs.writeFile(fname, announce);
}

async function getNextVersion() {
  const manifest = JSON.parse(await fs.readFile("./manifest.json"));
  const [major, minor, patch] = manifest.version.split(".").map(s => parseInt(s, 10));
  return `${major}.${minor}.${patch + 1}`;
}

async function updateVersion(next_version) {
  // manifest.json
  const manifest = JSON.parse(await fs.readFile("./manifest.json"));
  manifest.version = next_version;
  manifest.version_name = next_version;
  await fs.writeFile("./manifest.json", JSON.stringify(manifest, null, 2) + "\n", "utf-8");
  // package.json
  const package = JSON.parse(await fs.readFile("./package.json"));
  package.version = next_version;
  await fs.writeFile("./package.json", JSON.stringify(package, null, 2) + "\n", "utf-8");
  // package-lock.json
  const lock = JSON.parse(await fs.readFile("./package-lock.json"));
  lock.version = next_version;
  await fs.writeFile("./package-lock.json", JSON.stringify(lock, null, 2) + "\n", "utf-8");
}

// „ÉÜ„Çπ„ÉàÁî®ChromeÊã°Âºµ„ÇíWebStore„Å´„É™„É™„Éº„Çπ„Åô„Çã„Åã„Å©„ÅÜ„ÅãÊ±∫„ÇÅ„Çã.
// - „Éà„É™„Ç¨: ÂÆöÊúü
// - Êù°‰ª∂: ÊúÄÊñ∞„ÅÆtag„Åã„Çâ„ÄÅÁèæÂú®„ÅÆdevelop„Éñ„É©„É≥„ÉÅ„Å´Â∑ÆÂàÜ„Åå„ÅÇ„Çã„Åã„Å©„ÅÜ„Åã„ÅßÂà§Êñ≠.
// - SHOULD_RELEASE_STAGE=yes
// - NEW_TAG=3.2.2
// - ÂâØ‰ΩúÁî®: „Çø„Ç∞„Çí„Å§„Åë„Å¶push back„Åô„Çã
async function shouldReleaseStage() {
  const BRANCH = "develop";
  const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
  // const tags = await octokit.repos.listTags({ repo, owner, });
  const LATEST_TAG = shell.execSync(`git describe --tags --abbrev=0`).toString().trim();
  console.log("[DEBUG]", "LATEST_TAG:", LATEST_TAG);

  // Áõ¥Ëøë„Çø„Ç∞„Åã„Çâ„ÅÆ„Ç≥„Éü„ÉÉ„Éà„É™„Çπ„ÉàÂèñÂæó
  const commits = shell.execSync(`git log --pretty="%h (%an) %s" --no-merges ${LATEST_TAG}..HEAD`).toString().trim().split("\n");
  console.log("[DEBUG]", "commits:\n" + commits.join("\n"));

  // „Åô„Åß„Å´Èñã„ÅÑ„Å¶„ÅÑ„Çã„É™„É™„Éº„ÇπPR„ÇíÂèñÂæó
  const pr = await getReleasePR(octokit);

  // Áõ¥Ëøë„ÅÆ„Ç≥„Éü„ÉÉ„Éà„ÅåÁÑ°„ÅÑÂ†¥Âêà„ÅØ„ÉÜ„Çπ„Éà„É™„É™„Éº„Çπ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã
  const count = shell.execSync(`git rev-list --count --no-merges ${LATEST_TAG}..HEAD`).toString().trim();
  if (parseInt(count, 10) == 0) {
    if (pr) {
      console.log("[DEBUG]", "RELEASE PR:", pr.title);
      return await writeAnnouncement(getReleasePRAnnounce(pr));
    } else {
      console.log("[DEBUG]", "RELEASE PR:", pr);
      return await writeAnnouncement("ÈñãÁô∫ÈéÆÂÆàÂ∫úÊµ∑Âüü„ÄÅÁï∞Â∏∏„Å™„Åó.");
    }
  };

  // (2) „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å´Â§âÊõ¥„ÅåÁÑ°„ÅÑÂ†¥Âêà„ÉÜ„Çπ„Éà„É™„É™„Éº„Çπ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã
  // const diff_files = shell.execSync(`git diff --name-only ${LATEST_TAG}..HEAD`).toString().split("\n").filter(line => {
  //   return /^src\/|^dest\/|^manifest\.json/.test(line.trim());
  // });
  // console.log("[DEBUG]", "diff_files:", diff_files.length);
  // if (diff_files == 0) {
  //   if (pr) {
  //     return await writeAnnouncement(getReleasePRAnnounce(pr));
  //   } else {
  //     return await writeAnnouncement("ÈñãÁô∫ÈéÆÂÆàÂ∫úÊµ∑Âüü„ÄÅËàπÂΩ±„ÅÇ„Çå„Å©Áï∞Â∏∏„Å™„Åó. ÊäúÈå®„ÅÆÂøÖË¶Å„Å™„Åó„Å®Âà§Êñ≠.");
  //   }
  // }

  // Ê¨°„ÅÆ„Çø„Ç∞„ÇíÊ±∫ÂÆö
  const NEW_TAG = await getNextVersion();

  // „É™„É™„Éº„Çπ„Ç¢„Éä„Ç¶„É≥„Çπ„Çí‰ΩúÊàê
  await writeAnnouncement(createStageReleaseAnnounce(LATEST_TAG, NEW_TAG));

  if (!process.env.GITHUB_WORKFLOW) return console.log("[DEBUG]", "ÁµÇ‰∫Ü")

  // json„Éï„Ç°„Ç§„É´„Çíedit
  await updateVersion(NEW_TAG);

  // Ê¨°„ÅÆ„Çø„Ç∞„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Çí„Ç≥„Éü„ÉÉ„Éà„Åô„Çã
  const body = commits.join("\n");
  const files = ["package.json", "package-lock.json", "manifest.json"];
  shell.execSync(`git add ${files.join(" ")} && git commit -m '${NEW_TAG}' -m '${body}'`);

  // Ê¨°„ÅÆ„Çø„Ç∞„ÇíÂõ∫ÂÆö„Åô„Çã
  shell.execSync(`git tag ${NEW_TAG}`);

  // PUSH BACK „Åô„Çã
  const { GITHUB_ACTOR, GITHUB_TOKEN, GITHUB_REPOSITORY } = process.env;
  const REPO = `https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git`;
  shell.execSync(`git push "${REPO}" HEAD:${BRANCH} --tags --follow-tags`);

  // ÂæåÁ∂ö„Çπ„ÉÜ„ÉÉ„Éó„ÅÆ„Åü„ÇÅ„Å´„Éï„É©„Ç∞„ÇíÁ´ã„Å¶„Çã
  core.exportVariable("SHOULD_RELEASE_STAGE", "yes");
  core.exportVariable("NEW_TAG", NEW_TAG);

  // Á¢∫Ë™ç
  console.log("[INFO] LATEST_TAG:", LATEST_TAG);
  console.log("[INFO] COMMITS:", commits.length);
  console.log("[INFO] NEW_TAG:", NEW_TAG);
}

// Êú¨Áï™Áî®ChromeÊã°Âºµ„ÇíWebStore„Å´„É™„É™„Éº„Çπ„Åô„Çã„Åã„Å©„ÅÜ„ÅãÊ±∫„ÇÅ„Çã.
// - „Éà„É™„Ç¨: "RELEASE PR" ‰∏ä„Åß„ÅÆ„Ç≥„É°„É≥„Éà
// - Êù°‰ª∂: „Ç≥„É°„É≥„Éà„Å´‰∏ÄÂÆöÊï∞‰ª•‰∏ä„ÅÆ :+1: „Åæ„Åü„ÅØ :shipit: „ÇíÂê´„ÇÄ
// - SHOULD_RELEASE_PRODUCTION=yes
async function shouldReleaseProduction() {
  const { repo, owner } = github.context.repo;
  const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
  const pr = await getReleasePR(octokit);
  if (!pr) return console.log("[INFO]", "„É™„É™„Éº„ÇπPR„Ååopen„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ");
  // if (pr.number != process.env.ISSUE_NUMBER) return console.log("[INFO]", "RELEASE PR ‰∏ä„ÅÆ„Ç≥„É°„É≥„Éà„Åß„ÅØ„Å™„ÅÑ");
  console.log("[DEBUG]", pr.number, process.env.ISSUE_NUMBER);

  const comments = await octokit.issues.listComments({ repo, owner, issue_number: pr.number });
  if (comments.data.length == 0) return console.log("[INFO]", "„É™„É™„Éº„ÇπPR„Å´„Ç≥„É°„É≥„Éà„ÅåÁÑ°„ÅÑ");
  const EXPRESSION = /(^üëç|^:\+1:|^:shipit:|^LGTM)/i;

  // {{{ „Å≤„Å®„Çä„Åß‰ΩïÂõû„ÇÇüëç„Åó„Å¶„ÇÇ„É†„ÉÄ„Åß„Åô
  const summary = comments.data.reduce((ctx, comment) => {
    console.log("[DEBUG]", EXPRESSION.test(comment.body), comment.body);
    if (EXPRESSION.test(comment.body)) ctx[comment.user.login] = (ctx[comment.user.login] || 0) + 1;
    return ctx;
  }, {});
  console.log("[INFO]", "SUMMARY\n", summary);
  const reviewers = Object.keys(summary);
  // }}}

  if (reviewers.length < REQUIRED_LGTM_FOR_PRODUCTION_RELEASE) return console.log("[INFO]", "LGTM:", reviewers.length);
  const body = `${reviewers.length}‰∫∫„ÅÆ„Äåüëç„Äç„ÅåÈõÜ„Åæ„Å£„Åü„ÅÆ„Åß„Éû„Éº„Ç∏„Åó„ÄÅ„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„É™„É™„Éº„Çπ„Åó„Åæ„ÅôÔºÅ\n`
    + `Thank you! ${reviewers.map(name => "@" + name).join(", ")}`;
  await octokit.issues.createComment({ repo, owner, issue_number: pr.number, body });
  await octokit.pulls.merge({ repo, owner, pull_number: pr.number });

  // {{{ „É™„É™„Éº„Çπ„Çí‰ΩúÊàê
  const LATEST_TAG = shell.execSync(`git describe --tags --abbrev=0`).toString().trim();
  core.exportVariable("RELEASE_TAG", LATEST_TAG);
  core.exportVariable("SHOULD_RELEASE_PRODUCTION", "yes");
  const { data: release } = await octokit.repos.createRelease({ repo, owner, tag_name: LATEST_TAG, name: LATEST_TAG, body: pr.body.split("\n").slice(2).join("\n") });
  core.exportVariable("RELEASE_URL", release.html_url);
  core.exportVariable("RELEASE_UPLOAD_URL", release.upload_url);
  // }}}
}

async function main() {
  if (process.env.NODE_ENV == "production") {
    // issue_comment: [created, deleted] „Åß„Éà„É™„Ç¨„Åô„ÇãÊÉ≥ÂÆö
    shouldReleaseProduction();
  } else {
    // schedule: cron „Åß„Éà„É™„Ç¨„Åô„ÇãÊÉ≥ÂÆö
    shouldReleaseStage();
  }
};

if (require.main === module) {
  main();
}